# -*- coding: utf-8 -*-#!/usr/bin/env pythonimport os,sys,socketfrom thread import *import hashlibimport osimport urllib2import zlibimport threadingimport sysimport timeimport statimport datetimeMAX_CONN = 5            MAX_RECV = 8196   maxage = 0#list for translationtranslation_list = [    ('GET','OBTENIR'),    ('POST','POSTER'),    ('HEAD','TÊTE'),    ('Host','Hôte'),    ('Content-Length','Longeur-Contenu'),    ('Transfer-Encoding','Encodage-de-Transfert'),    ('chunked','en-morceaux'),    ('Connection','Connexion'),    ('close','fermer'),    ('Cache-Control','Contrôle-de-Cache'),    ('no-cache','pas-de-cache'),    ('private','privé'),    ('max-age','âge-max'),    ('Date','Date'),    ('Last-Modified','Dernière-Modification'),    ('If-Modified-Since','Si-Modifié-Depuis'),    ('Age','Âge'),    ('Vary','Varier'),    ('Via','Via'),    ('Range','Gamme'),    ('Accept','Accepte'),    ('Accept-Charset','Accepte-Carjeu'),    ('Accept-Encoding','Accepte-Encodage'),    ('Accept-Language','Accepte-Langue'),    ('Content-Type','Content-Type'),    ('Cookie','Biscuit'),    ('Content-Enconding','Encodage-de-Contenu'),    ('Content-Language','Langue-de-Contenu'),    ('Location','Emplacement'),    ('Server','Serveur'),    ('Referer','Référenceur'),    ('Set-Cookie','Dêfinir-Biscut'),    ('User-Agent','Agent-Utilisateur'),    ('HTTP/1.1','PdTHT/1.0'),    ('OK','C\'est Bon')]#10 to 60def Dec2Sex(n):    convertSex = "0123456789ABCDEFGHIJKLMNPQRSTUVWXYZabcdefghijkmnopqrstuvwxyz"    if n < 60:        return convertSex[n]    else:        return Dec2Sex(n/60) + convertSex[n%60]#60 to 10def Sex2Dec(strr):    str_standard ="0123456789ABCDEFGHIJKLMNPQRSTUVWXYZabcdefghijkmnopqrstuvwxyz"    sum = 0    for index in range(len(strr)):        for i in range(60):            if strr[index] == str_standard[i]:                sum = sum + i*60**(len(strr) - 1 - index)            else:                sum = sum + 0    return sum#Transfer dates in data from 60 to 10def DatesTransfer60To10(received_data, keyword):    tmpDate = received_data.split(keyword)[1]    Date_number = tmpDate.split('\r\n')[0]    YMD = Date_number.split(' ')[0]    tm = Date_number.split(' ')[1]    y = YMD.split('-')[0]    y = Sex2Dec(y)    m = YMD.split('-')[1]    m = Sex2Dec(m)    monthTable = ['Jan','Feb','Mar','Apr','May','Jun','Jul','Aug','Sep','Oct','Nov','Dec']    weekdayTable =['Mon','Tue','Wed','Thu','Fri','Sat','Sun']     h = tm.split(':')[0]    h = Sex2Dec(h)    mm = tm.split(':')[1]    mm = Sex2Dec(mm)    s = tm.split(':')[2]    s = Sex2Dec(s)    if s < 10:        ss = '0' + str(s)    else:        ss = str(s)        d = YMD.split('-')[2]    d = Sex2Dec(d)    if (h - 2 >= 0):        h = h - 2    else:        if(d != 1):            h = h - 2 + 24            d = d - 1        else:            if(m == 2 or m == 4 or m == 6 or m == 8 or m == 9 or m == 11):                m = m - 1                d = 31                h = h - 2 + 24            if(m == 5 or m == 7 or m == 10 or m == 12):                m = m - 1                d = 30                h = h - 2 + 24            if(m == 3):                m = m - 1                h = h - 2 + 24                if((y%4 == 0 and y%100 != 0) or (y%400 == 0)):                    d = 29                else:                    d = 28            else:                y = y - 1                m = 12                d = 31                h = h - 2 + 24    month = monthTable[m - 1]                if (d < 10):        dd = '0' + str(d)    else:        dd = str(d)    if (mm < 10):        mm = '0' + str(mm)    else:        mm = str(mm)    if (h < 10):        hh = '0' + str(h)    else:        hh = str(h)    weekdayNum = datetime.date(y, m, d).weekday()    weekday = weekdayTable[weekdayNum]    NewDate =  weekday + ', ' + dd + ' ' + month + ' ' + str(y) + ' ' + hh + ':' + mm + ':' + ss + ' GMT'    received_data = received_data.replace(Date_number,NewDate)    return received_data#Transfer date in data from 10 to 60def DatesTransfer10To60(received_data, keyword):    tmpDate = received_data.split(keyword)[1]    Date_number = tmpDate.split('\r\n')[0]    tmp = Date_number.split(' ')    monthTable = ['Jan','Feb','Mar','Apr','May','Jun','Jul','Aug','Sep','Oct','Nov','Dec']    d = tmp[1]    if(d[0] == '0'):        d = d[1]    else:        d = d    m = tmp[2]    m = monthTable.index(m) + 1    y = tmp[3]    tm = tmp[4]    h = tm.split(':')[0]    if(h[0] == '0'):       h = h[1]    else:        h = h    mm = tm.split(':')[1]    if(mm[0] == '0'):        mm = mm[1]    else:        mm = mm    s = tm.split(':')[2]    if(s[0] == '0'):        s = s[1]    else:        s = s     d = int(d)    m = int(m)    y = int(y)    h = int(h)    mm = int(mm)    s = int(s)    if(h + 2 < 24):        h = h + 2    else:        if(m == 1 or m == 3 or m == 5 or m == 7 or m == 8 or m == 10):            if(d != 31):                d = d + 1                h = h + 2 - 24            else:                d = 1                h = h + 2 - 24                m = m + 1        if(m == 4 or m == 6 or m == 8 or m == 9 or m == 11):            if(d != 30):                d = d + 1                h = h + 2 - 24            else:                d = 1                h = h + 2 - 24                m = m + 1        if(m == 12):            if(d != 31):                d = d + 1                h = h + 2 - 24            else:                y = y + 1                d = 1                m = 1                h = h + 2 - 24        else:            if((y%4 == 0 and y%100 != 0) or (y%400 == 0)):                if(d != 29):                    d = d + 1                    h = h + 2 - 24                else:                    d = 1                    m = m + 1                    h = h + 2 - 24            else:                if(d != 28):                    d = d + 1                    h = h + 2 - 24                else:                    d = 1                    m = m + 1                    h = h + 2 - 24        y = Dec2Sex(int(y))    m = Dec2Sex(int(m))    d = Dec2Sex(int(d))    h = Dec2Sex(int(h))    mm = Dec2Sex(int(mm))    s = Dec2Sex(int(s))    Date_new = y + '-' + m + '-' + d + ' ' + h + ':' + mm + ':' + s    received_data = received_data.replace(Date_number, Date_new)    return received_data#Transfer date to epoch timedef Date2Time(request_time):    Date_number = request_time.split(' GMT')[0]    monthTable = ['Jan','Feb','Mar','Apr','May','Jun','Jul','Aug','Sep','Oct','Nov','Dec']    #modified    day = Date_number.split(' ')[1]    dayrest = Date_number.split(' ')[2]    month = dayrest.split(' ')[0]    if(len(day)<2):        newday = '0'+ day    else:        newday = str(day)    newmonth = monthTable.index(month) + 1    if(len(month)<2):        newmonth = '0'+ newmonth    else:        newmonth = str(newmonth)    year = Date_number.split(' ')[3]    tm = Date_number.split(' ')[4]    Date_number = newday + '.' + newmonth + '.' + year + ' ' + tm    pattern = '%d.%m.%Y %H:%M:%S'    request_time = time.mktime(time.strptime(Date_number, pattern))    return request_time#Transfer number in data from 60 to 10def NumTransferF2E(received_data, keyword):    tmpNum = received_data.split(keyword)[1]    OldNum = tmpNum.split('\r\n')[0]    NewNum = Sex2Dec(OldNum)    received_data = received_data.replace(keyword + str(OldNum), keyword + str(NewNum))    return received_data#Transfer number in data from 10 to 60def NumTransferE2F(received_data, keyword):    tmpNum = received_data.split(keyword)[1]    OldNum = tmpNum.split('\r\n')[0]    NewNum = Dec2Sex(int(OldNum))    received_data = received_data.replace(keyword + OldNum, keyword + NewNum)    return received_data#translate data from English to Frenchdef transE2F(data):    for element in translation_list:        data = data.replace(element[0],element[1])    return data#translate data from French to Englishdef transF2E(data):    for element in translation_list:        data = data.replace(element[1],element[0])    return data#deal with client request, tranlate text, dates and numberdef ClientRequest(data):    if data.find('Date: ') != -1:        data = DatesTransfer10To60(data, 'Date: ')    if data.find('Last-Modified: ') != -1:        data = DatesTransfer10To60(data, 'Last-Modified: ')    if data.find('If-Modified-Since: ') != -1:        data = DatesTransfer10To60(data, 'If-Modified-Since: ')    if data.find('Content-Length: ') != -1:        data = NumTransferE2F(data, 'Content-Length: ')    if data.find('max-age=') != -1:        data = NumTransferE2F(data, 'max-age=')    if data.find('Age: ') != -1:        data = NumTransferE2F(data, 'Age: ')    data = transE2F(data)    first_line = data.split('\r\n')[0]    url = first_line.split(' ')[1]    new_url = '/' + url.split('/')[-1]    data = data.replace(url, new_url)    return data#deal with server response, tranlate text, dates and numberdef ServerResponse(data):    data = transF2E(data)    if data.find('Date: ') != -1:        data = DatesTransfer60To10(data, 'Date: ')    if data.find('Last-Modified: ') != -1:        data = DatesTransfer60To10(data, 'Last-Modified: ')    if data.find('If-Modified-Since: ') != -1:        data = DatesTransfer60To10(data, 'If-Modified-Since: ')    if data.find('Content-Length: ') != -1:        data = NumTransferF2E(data, 'Content-Length: ')    if data.find('max-age=') != -1:        data = NumTransferF2E(data, 'max-age=')    if data.find('Age: ') != -1:        data = NumTransferE2F(data, 'Age: ')    return data#Add selected headerdef Addheader(message,header):    if(header in message):        return message    else:        message = message.replace('\r\n\r\n','\r\n'+ header + '\r\n\r\n')        return messagedef main():    #set host and port    if (len(sys.argv) < 2):        port = 8080    else:        port = int(sys.argv[1])    host = ''    try:        #initialize socket        s = socket.socket(socket.AF_INET, socket.SOCK_STREAM)        s.bind((host, port))        s.listen(MAX_CONN)    except Exception, e:        print "Unable To Initialize Socket"        sys.exit(2)    while 1:        try:            conn, addr = s.accept()            data = conn.recv(MAX_RECV)            #print data            start_new_thread(conn_string, (conn,data,addr))        except KeyboardInterrupt:            s.close()            print "\nProxy Server Shutting Down ..."            sys.exit(1)    s.close()def conn_string(conn, data, addr):    try:        first_line = data.split('\r\n')[0]        #print first_line        url = first_line.split(' ')[1]        #find the pos of ://        http_pos = url.find("://")        if (http_pos == -1):            temp = url        else:            #get the rest of url            temp = url[(http_pos + 3):]        #find the pos of the port        port_pos = temp.find(":")        #find the end of the web server        webserver_pos = temp.find("/")        if webserver_pos == -1:            webserver_pos = len(temp)        webserver = " "        port = -1        if(port_pos == -1 or webserver_pos < port_pos):            port = 80            webserver = temp[:webserver_pos]        else:            port = int((temp[(port_pos + 1):])[:webserver_pos - port_pos - 1])            webserver = temp[:port_pos]        orig_data = data                data = ClientRequest(data)        proxy_server(webserver, port, conn, data, addr, orig_data)    except Exception, e:        passdef proxy_server(webserver, port, conn, data, addr, orig_data):    m = hashlib.md5()    m.update(webserver)    filename = m.hexdigest() + ".cached"    request_time = 0     not_same = 0    try:        s = socket.socket(socket.AF_INET, socket.SOCK_STREAM)        if('POST' in 'orig_data'):            s.connect((webserver, port))            data = Addheader(data,'Via: 1.1 super_proxy')            s.sendall(data)            while 1:                reply = s.recv(MAX_RECV)                if(len(reply) == 0):                    break                else:                    reply = ServerResponse(reply)                    reply = Addheader(reply,'Via: 1.1 super_proxy')                    conn.sendall(reply)        else:            if os.path.exists(filename) and os.stat(filename).st_size != 0:                print "Cache hit"                reply = open(filename).read()                if('max-age=' in reply):                    maxageBefore = reply.split('max-age=')[1]                    maxage = maxageBefore.split('\r\n')[0]                else:                    maxage = 0                AgeBefore = reply.split('Age: ')[0]                AgeAfter = reply.split('Age: ')[1]                Age = AgeAfter.split('\r\n\r\n')[0]                AgeRest = AgeAfter.split('\r\n\r\n')[1]                DateBefore = reply.split('Date: ')[1]                request_time = DateBefore.split('\r\n')[0]                request_time = Date2Time(request_time)                DateDiff = time.mktime(time.gmtime()) - request_time - 3600                DateDiffStr = str(int(DateDiff))                if('Vary' in reply):                    varyBefore = reply.split('Vary: ')[1]                    vary_reply = varyBefore.split('\r\n')[0]                    if(vary_reply in orig_data):                        varyBefore = data.split(vary_reply + ': ')[1]                        vary_reply_data = varyBefore.split('\r\n')[0]                        if(vary_reply in reply):                            varyBefore = reply.split(vary_reply + ': ')[1]                            vary_reply_reply = varyBefore.split('\r\n')[0]                            if(vary_reply_reply !=  vary_reply_data):                                not_same = 1;                            else:                                pass                        else:                            pass                    else:                        pass                else:                    pass                if not_same == 0:                    if(DateDiff < maxage):                        reply = AgeBefore + 'Age: ' + DateDiffStr + '\r\n\r\n' + AgeRest                        conn.sendall(reply)                    else:                        print "Cache expired, need to check again"                        s.connect((webserver, port))                        response = urllib2.urlopen("http://" + webserver)                        if response.getcode() == 304:                            reply = open(filename).readlines()                            print 'data has not been modified'                            conn.sendall(reply)                        else:                             print 'data has been modified'                            data = Addheader(data,'Via: 1.1 super_proxy')                            s.sendall(data)                                                while 1:                                reply = s.recv(MAX_RECV)                                if(len(reply) == 0):                                    break                                else:                                    reply = ServerResponse(reply)                                if sys.getsizeof(reply) <= 1000000:                                         if('\r\n\r\n' in reply):                                        if('Age:' in reply):                                                    reply = Addheader(reply,'Via: 1.1 super_proxy')                                        else:                                            reply = Addheader(reply,'Via: 1.1 super_proxy')                                             reply = reply.replace('\r\n\r\n','\r\n'+'Age: 0\r\n\r\n')                                    if('Cache-Control: private' not in reply and 'Cache-Control: no-cache' not in reply):                                        open(filename, 'a+').writelines(reply)                                    else:                                        pass                                    conn.sendall(reply)                                                                 else:                                    conn.sendall(reply)                                                  else:                    print 'Header Value Varies'                    print "Cache miss"                    s.connect((webserver, port))                    data = Addheader(data,'Via: 1.1 super_proxy')                    s.sendall(data)                                   while 1:                        reply = s.recv(MAX_RECV)                        if(len(reply) == 0):                            break                        else:                            reply = ServerResponse(reply)                        if sys.getsizeof(reply) <= 1000000:                                 if('\r\n\r\n' in reply):                                if('Age:' in reply):                                            reply = Addheader(reply,'Via: 1.1 super_proxy')                                else:                                    reply = Addheader(reply,'Via: 1.1 super_proxy')                                     reply = reply.replace('\r\n\r\n','\r\n'+'Age: 0\r\n\r\n')                            if('Cache-Control: private' not in reply and 'Cache-Control: no-cache' not in reply):                                open(filename, 'a+').writelines(reply)                            else:                                pass                            conn.sendall(reply)                                                   else:                            conn.sendall(reply)            else:                           print "Cache miss"                s.connect((webserver, port))                data = Addheader(data,'Via: 1.1 super_proxy')                s.sendall(data)                               while 1:                    reply = s.recv(MAX_RECV)                    if(len(reply) == 0):                        break                    else:                        reply = ServerResponse(reply)                    if sys.getsizeof(reply) <= 1000000:                             if('\r\n\r\n' in reply):                            if('Age:' in reply):                                        reply = Addheader(reply,'Via: 1.1 super_proxy')                            else:                                reply = Addheader(reply,'Via: 1.1 super_proxy')                                 reply = reply.replace('\r\n\r\n','\r\n'+'Age: 0\r\n\r\n')                        if('Cache-Control: private' not in reply and 'Cache-Control: no-cache' not in reply):                            open(filename, 'a+').writelines(reply)                        else:                            pass                        conn.sendall(reply)                    else:                        conn.sendall(reply)                                s.close()        conn.close()        sys.exit(1)    except socket.error, (value, message):        s.close()        conn.close()        sys.exit(1)main()